
<!--Map container-->
<div id="map"></div>

<!--Script-->
<script>
	// Initializing map and setting view to chosen geographical coordinates and a zoom level
		// Set default view to IP address of current user **
	var map = L.map('map').setView([30.307182, -97.755996], 12); // Austin, TX

	// Adding Mapbox Streets tile layer
	L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', 
		{ attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://mapbox.com">Mapbox</a>', 
		maxZoom: 18, 
		id: 'mapbox.streets', 
		accessToken: 'pk.eyJ1Ijoic3p1bmppYyIsImEiOiJjamE1a3FudDY0bHI2MnBwb2d5eTNueWs1In0.kbvyZYrCsTeQP4yvdWCdig'
	}).addTo(map);

	// MakiMarkers (Map icons)
		// Must npm install for this to work **	
	L.MakiMarkers.accessToken="pk.eyJ1Ijoic3p1bmppYyIsImEiOiJjamE1a3FudDY0bHI2MnBwb2d5eTNueWs1In0.kbvyZYrCsTeQP4yvdWCdig";

	var obstructionIcon = L.MakiMarkers.icon({icon: "roadblock", color: "#f44336", size: "l"});

	var clearIcon = L.MakiMarkers.icon({icon: "disability", color: "#4caf50", size: "l"});

	// Creating temp layer to store new features
	var drawnItems = new L.FeatureGroup();
	map.addLayer(drawnItems);

	// Adding different types of markers ??? (3 different soultions that could all fail)
    	// 1. Create your own draw handlers that extend from L.Draw.Marker and change the type. 
    		// Then you would need to alter the L.DrawToolbar to include you new handler.
    	// 2. Modifying options on the fly and listen to the events to allow different styles and layers 	for the shapes
    	// 3. You could set up multiple options, then call them from a custom UI
    	// 4. You could hack up L.DrawToolbar.getModehandlers to include X number of versions of the marker handler for each of them.

    // Going with #4
    	// Hacking up L.DrawToolbar.getModeHandlers to include 2 versions of the marker handler 

    // Red marker (obstruction)
    L.Draw.MarkerR = L.Draw.Marker.extend({
    	initialize: function (map, options) {
      		this.type = 'R';

      		L.Draw.Feature.prototype.initialize.call(this, map, options);
    	},

    	addHooks: function () {
      		L.Draw.Marker.prototype.addHooks.call(this);
			
			if (this._map) {
        		this._tooltip.updateContent({ text: 'Click to place an obstruction marker.' });
      		}
    	}
	});

	// Green marker (clear path)
	L.Draw.MarkerG = L.Draw.Marker.extend({
		initialize: function (map, options) {
			this.type = 'G';

			L.Draw.Feature.prototype.initialize.call(this, map, options);
    	},

		addHooks: function () {
			L.Draw.Marker.prototype.addHooks.call(this);

      		if (this._map) {
        		this._tooltip.updateContent({ text: 'Click to place a clear path marker.' });
      		}
    	}
	});

	// Tool-bar hack to include new markers 
	L.DrawToolbar.include({
		getModeHandlers: function (map) {
			return [
				{
					enabled: true,
                	handler: new L.Draw.MarkerR(map, { icon: obstructionIcon }),
					//handler: new L.Draw.MarkerR(map, { icon: new L.Icon.Default() }),
					title: 'Obstruction'
				},
				{
					enabled: true,
					handler: new L.Draw.MarkerG(map, { icon: clearIcon }),
					//handler: new L.Draw.MarkerG(map, { icon: new L.Icon.Default() }),
					title: 'Clear path'
				},
			];
		}
	});

	// Creating draw controls and toolbar
	var drawControl = new L.Control.Draw({
		draw: {
			position: 'topleft'
		},
			edit: false
	});
	map.addControl(drawControl);

	// Custom functions upon 'edit' (when user clicks map to place marker)
	map.on('draw:created', function(e) {
    	var coords = e.layer._latlng;
    	console.log(coords);
    	var tempMarker = drawnItems.addLayer(e.layer);

    // ** Need to implement this if/else ** 

	// If red marker (barrier type) was placed 
		// Form with marker type options: barrier, construction, curb, curb cut, rough road, stairs 

	// If green marker (clear path type) was placed 
		// Form with marker type options: ramp, elevator 
		
		var popupContent = 
			'<form role="form" id="form" enctype="multipart/form-data" class="form-horizontal" onsubmit="addMarker()">'+
	        
	        // Date
	        '<div class="form-group">'+
				'<label class="control-label col-sm-5"><strong>Date: </strong></label>'+
				'<input type="date" placeholder="Required" id="date" name="date" class="form-control"/>'+ 
			'</div>'+

			// Type of marker
			'<div class="form-group">'+
				'<label class="control-label col-sm-5"><strong>Type of Marker: </strong></label>'+
				'<select class="form-control" id="marker-type" name="marker-type">'+
	            	'<option value="barrier">Barrier</option>'+
	            	'<option value="construction">Construction</option>'+
	            	'<option value="obstruction">Obstruction</option>'+
	            	'<option value="stairs">Stairs</option>'+
	            	'<option value="ramp">Ramp</option>'+
	            	'<option value="elevator">Elevator</option>'+
	          	'</select>'+ 
			'</div>'+

			// Description (optional)
	        '<div class="form-group">'+
				'<label class="control-label col-sm-5"><strong>Description (optional): </strong></label>'+
				'<textarea class="form-control" rows="6" id="description" name="description"></textarea>'+
			'</div>'+

			// Location coordinates (not seen)
			'<input style="display: none;" type="text" id="lat" name="lat" value="'+coords.lat.toFixed(6)+'" />'+
			'<input style="display: none;" type="text" id="lng" name="lng" value="'+coords.lng.toFixed(6)+'" />'+

			// Submit button 
			'<div class="form-group">'+
				'<div style="text-align:center;" class="col-xs-4"><button type="submit" value="submit" class="btn btn-primary trigger-submit">Submit</button></div>'+
			'</div>'+

	    	'</form>';

		tempMarker.bindPopup(popupContent,
		{
			keepInView: true,
      		closeButton: true // ** TODO: Make this close button cancel the form **
    	}).openPopup();

		// Submit the form 
		$("#form").submit(function(e){
			e.preventDefault();
			// addMarker();
			var date = $("#date").val().trim();
			var markerType = $("#marker-type").val().trim();
			var description = $("#description").val().trim();
			var lat = $("#lat").val().trim();
			var lng = $("#lng").val().trim();
			console.log("Date: " + date);
			console.log("Marker type: " + markerType);
			console.log("Description: " + description);
			console.log("Lat: " + lat);
			console.log("Lng: " + lng);


		// ** TODO:
			// Save location, type, and date to database 

			// Send back the correct icon that user requested, to be saved on the map 
			// (Send back as an argument)
			// Remeber to delete original marker 

		});
	});

</script>
