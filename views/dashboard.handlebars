
<!--Map container-->
<div id="container">
	<div id="header">
		<span>
			<h1 class="display1" >Welcome {{user.firstname}}<a class="btn logoutBtn" href="/logout"><i class="fa fa-sign-out fa-fw"></i> LOGOUT</a></h1>
		</span>
			
	</div>
	<!-- <input type="text" class="form-control" placeholder="&#xF002; Search location..." style="font-family:Arial, FontAwesome" id="searchbox"/> -->
	<div id="map">
		
	</div>
</div>

<!--Script-->
<script>
	
	function deletePin(e) {
		console.log($(this));
		console.log($(this)[0].map._popup._latlng);
		console.log($(this)[0].map._popup._latlng.lat);
		console.log($(this)[0].map._popup._latlng.lng);
		//console.log(id);
		var id = $("#id").val();
		console.log(id);		

		$.ajax({
			method: 'DELETE',
			url: '/api/pins/' + id
		}).done(function(e) {
			console.log('done');
		})

	}


	// Function to grab pins from database 
	function getPins() {
		$.get("/api/pins", function(data) {

			for (var i = 0; i < data.length; i++) {
				
				var newIcon = L.icon({
	    		iconUrl: 'images/new-pins/' + data[i].markerType + '.png',
	    		iconSize: [85, 85], // size of the icon
	    		iconAnchor: [50, 70], // point of the icon which will correspond to marker's location
	    		popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor
				});

				var id = data[i].id;		

				L.marker( [data[i].lat, data[i].lng], {icon: newIcon} )
      			.bindPopup( 
      				// ID (INVISIBLE)
      				'<input style="display: none;" type="text" id="id" name="id" value="'+ id +'"/>'+

      				// MARKER TITLE
      				'<h2>' + data[i].markerType + '</h2> <h4>' 
      				// TIMESTAMP
      				+ data[i].createdAt + '</h4>'
      				// USER BYLINE

      				// DESCRIPTION
      				+ '<h5>' + data[i].description + '</h5>' +

      				// DELETE BUTTON 
      				'<div><button onclick="deletePin()" type="button" class="btn btn-primary" id="delete-btn">Delete</button></div>'
      			)
      			.addTo( map );
			}

		})


	};


	getPins();


	// Adding Mapbox Streets tile layer
	var mapBoxAttr = 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
	'Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
	mapBoxUrl = 'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1Ijoic3p1bmppYyIsImEiOiJjamE1a3FudDY0bHI2MnBwb2d5eTNueWs1In0.kbvyZYrCsTeQP4yvdWCdig';

	
	var grayscale = L.tileLayer(mapBoxUrl, {id:"mapbox.light", attribution : mapBoxAttr}),
		streets = L.tileLayer(mapBoxUrl, {id:"mapbox.streets", attribution : mapBoxAttr}),
		satellite = L.tileLayer(mapBoxUrl, {id:"mapbox.satellite", attribution : mapBoxAttr});
		

	var map = L.map('map',{
		center : [30.307182, -97.755996],
		maxZoom : 18,
		zoom : 14,
		layers : [streets]
	});	

	var baseLayers = {
		"Streets" : streets,
		"Grayscale" : grayscale,
		"Satellite" : satellite,
		
	}
	L.control.layers(baseLayers).addTo(map);

	var locateControls = {
		flyTo : true,
		drawCircle : false,
		enableHighAccuracy: true,
	}
	var lc = L.control.locate(locateControls).addTo(map);
	console.log(lc);
	lc.start();


 	// CUSTOM ICONS 

  	// Curb icon
  	var curbIcon = L.icon({
	    iconUrl: 'images/new-pins/Curb.png',
	    iconSize: [85, 85], // size of the icon
	    iconAnchor: [50, 70], // point of the icon which will correspond to marker's location
	    popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor
	});

	// Stairs icon
	var stairsIcon = L.icon({
	    iconUrl: 'images/new-pins/Stairs.png',
	    iconSize: [85, 85], // size of the icon
	    iconAnchor: [50, 70], // point of the icon which will correspond to marker's location
	    popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor
	});

	// Barrier icon
	var barrierIcon = L.icon({
	    iconUrl: 'images/new-pins/Barrier.png',
	    iconSize: [85, 85], // size of the icon
	    iconAnchor: [50, 70], // point of the icon which will correspond to marker's location
	    popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor
	});

	// Construction icon 
	var constructionIcon = L.icon({
	    iconUrl: 'images/new-pins/Construction.png',
	    iconSize: [85, 85], // size of the icon
	    iconAnchor: [50, 70], // point of the icon which will correspond to marker's location
	    popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor
	});

	// Rough road icon
	var roughIcon = L.icon({
	    iconUrl: 'images/new-pins/RoughRoad.png',
	    iconSize: [85, 85], // size of the icon
	    iconAnchor: [50, 70], // point of the icon which will correspond to marker's location
	    popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor
	}); 

	// Curb cut icon
	var cutIcon = L.icon({
	    iconUrl: 'images/new-pins/CurbCut.png',
	    iconSize: [85, 85], // size of the icon
	    iconAnchor: [50, 70], // point of the icon which will correspond to marker's location
	    popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor
	}); 

	// Ramp icon
	var rampIcon = L.icon({
	    iconUrl: 'images/new-pins/Ramp.png',
	    iconSize: [85, 85], // size of the icon
	    iconAnchor: [50, 70], // point of the icon which will correspond to marker's location
	    popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor
	});

 	

	// Creating temp layer to store new features 
	// TOOLBAR MARKERS 	

	// Curb (light red)
	L.Draw.MarkerCurb = L.Draw.Marker.extend({
    	initialize: function (map, options) {
    		this.type = 'Curb';

    		L.Draw.Feature.prototype.initialize.call(this, map, options);
    	},

    	addHooks: function () {
    		L.Draw.Marker.prototype.addHooks.call(this);

    		if (this._map) {
    			this._tooltip.updateContent({ text: 'Click to place a <strong>CURB</strong> marker.' });
    		}
    	}
    });

	// Stairs (slightly darker red)
	L.Draw.MarkerStairs = L.Draw.Marker.extend({
    	initialize: function (map, options) {
    		this.type = 'Stairs';

    		L.Draw.Feature.prototype.initialize.call(this, map, options);
    	},

    	addHooks: function () {
    		L.Draw.Marker.prototype.addHooks.call(this);

    		if (this._map) {
    			this._tooltip.updateContent({ text: 'Click to place a <strong>STAIRS</strong> marker.' });
    		}
    	}
    });

	// Barrier (darkest red)
	L.Draw.MarkerBarrier = L.Draw.Marker.extend({
    	initialize: function (map, options) {
    		this.type = 'Barrier';

    		L.Draw.Feature.prototype.initialize.call(this, map, options);
    	},

    	addHooks: function () {
    		L.Draw.Marker.prototype.addHooks.call(this);

    		if (this._map) {
    			this._tooltip.updateContent({ text: 'Click to place a <strong>BARRIER</strong> marker.' });
    		}
    	}
    });

	// Construction (orange)
	L.Draw.MarkerConstruction = L.Draw.Marker.extend({
    	initialize: function (map, options) {
    		this.type = 'Construction';

    		L.Draw.Feature.prototype.initialize.call(this, map, options);
    	},

    	addHooks: function () {
    		L.Draw.Marker.prototype.addHooks.call(this);

    		if (this._map) {
    			this._tooltip.updateContent({ text: 'Click to place a <strong>CONSTRUCTION</strong> marker.' });
    		}
    	}
    });

	// Rough road (yellow)
	L.Draw.MarkerRough = L.Draw.Marker.extend({
    	initialize: function (map, options) {
    		this.type = 'Rough';

    		L.Draw.Feature.prototype.initialize.call(this, map, options);
    	},

    	addHooks: function () {
    		L.Draw.Marker.prototype.addHooks.call(this);

    		if (this._map) {
    			this._tooltip.updateContent({ text: 'Click to place a <strong>ROUGH ROAD</strong> marker.' });
    		}
    	}
    });

	// Curb cut (light green)
	L.Draw.MarkerCut = L.Draw.Marker.extend({
    	initialize: function (map, options) {
    		this.type = 'Cut';

    		L.Draw.Feature.prototype.initialize.call(this, map, options);
    	},

    	addHooks: function () {
    		L.Draw.Marker.prototype.addHooks.call(this);

    		if (this._map) {
    			this._tooltip.updateContent({ text: 'Click to place a <strong>CURB CUT</strong> marker.' });
    		}
    	}
    });

	// Ramp (slightly darker green)
	L.Draw.MarkerRamp = L.Draw.Marker.extend({
    	initialize: function (map, options) {
    		this.type = 'Ramp';

    		L.Draw.Feature.prototype.initialize.call(this, map, options);
    	},

    	addHooks: function () {
    		L.Draw.Marker.prototype.addHooks.call(this);

    		if (this._map) {
    			this._tooltip.updateContent({ text: 'Click to place a <strong>RAMP</strong> marker.' });
    		}
    	}
    });

	// Hacking up L.DrawToolbar.getModeHandlers to include the 2 new versions of the marker handler
	L.DrawToolbar.include({
		getModeHandlers: function (map) {
			return [
				{
					enabled: true,
					handler: new L.Draw.MarkerCurb(map, { icon: curbIcon }),
					title: 'CURB'
				},
				{
					enabled: true,
					handler: new L.Draw.MarkerStairs(map, { icon: stairsIcon }),
					title: 'STAIRS'
				},
				{
					enabled: true,
					handler: new L.Draw.MarkerBarrier(map, { icon: barrierIcon }),
					title: 'BARRIER'
				},
				{
					enabled: true,
					handler: new L.Draw.MarkerConstruction(map, { icon: constructionIcon }),
					title: 'CONSTRUCTION'
				},
				{
					enabled: true,
					handler: new L.Draw.MarkerRough(map, { icon: roughIcon }),
					title: 'ROUGH ROAD'
				},
				{
					enabled: true,
					handler: new L.Draw.MarkerCut(map, { icon: cutIcon }),
					title: 'CURB CUT'
				},
				{
					enabled: true,
					handler: new L.Draw.MarkerRamp(map, { icon: rampIcon }),
					title: 'RAMP'
				}
			]
				}
		});

	// Creating draw controls and toolbar
	var drawControl = new L.Control.Draw({
		draw: {
			position: 'topleft',
		},
		edit: false
	});
	map.addControl(drawControl);

	var markers = [];

// Custom functions upon 'edit' (when user clicks map to place marker)
map.on('draw:created', function(e) {  

	var marker;
	var coords = e.layer._latlng;
	var id;
	var markerType;
	var title;
	var markerIcon;

	if (markers.length < 1) {
		id = 0
	} else {
		id = markers[markers.length - 1]._id + 1
	};  	

		switch (e.layerType) {
			case 'Curb': // If a red curb marker is placed
			marker = L.marker(coords, { icon: curbIcon });
			title = '<h1 align="center"><strong>Curb</strong></h1>';
			markerType = '<input style="display: none;" type="text" id="markerType" name="markerType" value="Curb" />'
			break;

			case 'Stairs': // If a stairs marker is placed
			marker = L.marker(coords, { icon: stairsIcon });
			title = '<h1 style="text-align:center"><strong>Stairs</strong></h1>';
			markerType = '<input style="display: none;" type="text" id="markerType" name="markerType" value="Stairs" />'
			break;

			case 'Barrier': // If a barrier marker is placed
			marker = L.marker(coords, { icon: barrierIcon });
			title = '<h1 style="text-align:center"><strong>Barrier</strong></h1>';
			markerType = '<input style="display: none;" type="text" id="markerType" name="markerType" value="Barrier" />'
			break;

			case 'Construction': // If a construction marker is placed
			marker = L.marker(coords, { icon: constructionIcon });
			title = '<h1 style="text-align:center"><strong>Construction</strong></h1>';
			markerType = '<input style="display: none;" type="text" id="markerType" name="markerType" value="Construction" />'
			break;

			case 'Rough': // If a rough road marker is placed
			marker = L.marker(coords, { icon: roughIcon });
			title = '<h1 style="text-align:center"><strong>Rough Road</strong></h1>';
			markerType = '<input style="display: none;" type="text" id="markerType" name="markerType" value="RoughRoad" />'
			break;

			case 'Cut': // If a curb cut marker is placed
			marker = L.marker(coords, { icon: cutIcon });
			title = '<h1 style="text-align:center"><strong>Curb Cut</strong></h1>';
			markerType = '<input style="display: none;" type="text" id="markerType" name="markerType" value="CurbCut" />'
			break;

			case 'Ramp': // If a ramp marker is placed
			marker = L.marker(coords, { icon: rampIcon });
			title = '<h1 style="text-align:center"><strong>Ramp</strong></h1>';
			markerType = '<input style="display: none;" type="text" id="markerType" name="markerType" value="Ramp" />'
			break;

		};

    	var popupContent = 

    	'<form role="form" id="form" enctype="multipart/form-data" class="form-horizontal" onsubmit="addMarker()">'+
    			
    		// Marker type value (not seen)
    		markerType + 

    		// Marker type title
    		title + 

			// Description (optional)
			'<div class="form-group">'+
			'<label class="control-label col-sm-5"><strong>Description (optional): </strong></label>'+
			'<textarea class="form-control" rows="6" id="description" name="description"></textarea>'+
			'</div>'+

			// Location coordinates (not seen)
			'<input style="display: none;" type="text" id="lat" name="lat" value="'+coords.lat.toFixed(6)+'" />'+
			'<input style="display: none;" type="text" id="lng" name="lng" value="'+coords.lng.toFixed(6)+'" />'+

			// Submit & cancel buttons
			'<div class="form-group">'+
			'<div class="col-xs-6"><button type="button" class="btn btn-primary" id="cancel-btn">Cancel</button></div>'+
				'<div class="col-xs-6"><button type="submit" value="submit" class="btn btn-primary trigger-submit" id="submit-btn">Submit</button></div>'+
				'</div>'+

				'</form>';

				marker
				.bindPopup(popupContent,
				{
					keepInView: true,
					closeButton: false 
				})
				.addTo(map)
				.openPopup()
				._id = id


				console.log("Marker id: " + marker._id);


		// Cancel form button (deletes marker, does not add to array)
		$("#cancel-btn").click(function() {
			map.removeLayer(marker);
			console.log("Marker canceled; not added to array")
			console.log(markers);
		});

		// Submit form button 
		$("#submit-btn").click(function(e){
			e.preventDefault();

			markers.push(marker)
			console.log("Marker with id " + marker._id + " added to array")
			console.log(markers);

			map.closePopup();

			var markerType = $("#markerType").val().trim();
			var description = $("#description").val().trim();
			var latString = $("#lat").val().trim();
			var lngString = $("#lng").val().trim();
			var lat = parseFloat(latString);
			var lng = parseFloat(lngString);

			// Make a newPin object
			var newPin = {
				markerType: markerType,
				description: description,
				lat: lat,
				lng: lng
			}; 

			console.log(newPin);

			// Send an AJAX-POST request 
			$.post("/api/new", newPin)
				// On success
				.done(function() {
					console.log("Pin successfully added to database");
				})

 
			});




	});

</script>
